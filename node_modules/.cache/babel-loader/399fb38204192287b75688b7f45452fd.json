{"ast":null,"code":"/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast').Definition} Definition\n */\nimport { visit } from 'unist-util-visit';\nconst own = {}.hasOwnProperty;\n/**\n * Find definitions in `node`.\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} node\n */\n\nexport function definitions(node) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null);\n\n  if (!node || !node.type) {\n    throw new Error('mdast-util-definitions expected node');\n  }\n\n  visit(node, 'definition', definition => {\n    const id = clean(definition.identifier);\n\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition;\n    }\n  });\n  return definition;\n  /**\n   * Get a node from the bound definition cache.\n   *\n   * @param {string} identifier\n   * @returns {Definition|null}\n   */\n\n  function definition(identifier) {\n    const id = clean(identifier);\n    return id && own.call(cache, id) ? cache[id] : null;\n  }\n}\n/**\n * @param {string} [value]\n * @returns {string}\n */\n\nfunction clean(value) {\n  return String(value || '').toUpperCase();\n}","map":{"version":3,"sources":["D:/Project/ReactJS/MejaKita - Chatbot/Chatbot/node_modules/mdast-util-definitions/index.js"],"names":["visit","own","hasOwnProperty","definitions","node","cache","Object","create","type","Error","definition","id","clean","identifier","call","value","String","toUpperCase"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAAQA,KAAR,QAAoB,kBAApB;AAEA,MAAMC,GAAG,GAAG,GAAGC,cAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAChC;AACA,QAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAd;;AAEA,MAAI,CAACH,IAAD,IAAS,CAACA,IAAI,CAACI,IAAnB,EAAyB;AACvB,UAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAEDT,EAAAA,KAAK,CAACI,IAAD,EAAO,YAAP,EAAsBM,UAAD,IAAgB;AACxC,UAAMC,EAAE,GAAGC,KAAK,CAACF,UAAU,CAACG,UAAZ,CAAhB;;AACA,QAAIF,EAAE,IAAI,CAACV,GAAG,CAACa,IAAJ,CAAST,KAAT,EAAgBM,EAAhB,CAAX,EAAgC;AAC9BN,MAAAA,KAAK,CAACM,EAAD,CAAL,GAAYD,UAAZ;AACD;AACF,GALI,CAAL;AAOA,SAAOA,UAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,WAASA,UAAT,CAAoBG,UAApB,EAAgC;AAC9B,UAAMF,EAAE,GAAGC,KAAK,CAACC,UAAD,CAAhB;AACA,WAAOF,EAAE,IAAIV,GAAG,CAACa,IAAJ,CAAST,KAAT,EAAgBM,EAAhB,CAAN,GAA4BN,KAAK,CAACM,EAAD,CAAjC,GAAwC,IAA/C;AACD;AACF;AAED;AACA;AACA;AACA;;AACA,SAASC,KAAT,CAAeG,KAAf,EAAsB;AACpB,SAAOC,MAAM,CAACD,KAAK,IAAI,EAAV,CAAN,CAAoBE,WAApB,EAAP;AACD","sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast').Definition} Definition\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `node`.\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} node\n */\nexport function definitions(node) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!node || !node.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(node, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /**\n   * Get a node from the bound definition cache.\n   *\n   * @param {string} identifier\n   * @returns {Definition|null}\n   */\n  function definition(identifier) {\n    const id = clean(identifier)\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n"]},"metadata":{},"sourceType":"module"}